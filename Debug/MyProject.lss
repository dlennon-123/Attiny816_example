
MyProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00803e00  00000482  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00803e1c  00803e1c  00000532  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cb4  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ccd  00000000  00000000  0000341c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d04  00000000  00000000  000050e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00005df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001404  00000000  00000000  00006154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a4  00000000  00000000  00007558  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00007dfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	4e c0       	rjmp	.+156    	; 0xa4 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e2 e8       	ldi	r30, 0x82	; 130
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ac 31       	cpi	r26, 0x1C	; 28
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	ac e1       	ldi	r26, 0x1C	; 28
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 31       	cpi	r26, 0x1E	; 30
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	4c d1       	rcall	.+664    	; 0x300 <main>
  68:	0a c2       	rjmp	.+1044   	; 0x47e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
  6c:	b3 d1       	rcall	.+870    	; 0x3d4 <system_init>
  6e:	08 95       	ret

00000070 <__vector_5>:
 *
 * Function is called when the pull switch (Port C Pin 0) sees a rising or 
 * falling edge.
 */
ISR(PORTC_PORT_vect)
{
  70:	1f 92       	push	r1
  72:	0f 92       	push	r0
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	0f 92       	push	r0
  78:	11 24       	eor	r1, r1
  7a:	8f 93       	push	r24
  7c:	ef 93       	push	r30
  7e:	ff 93       	push	r31
	cli();
  80:	f8 94       	cli
	sw_state_change = 1;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <sw_state_change>
	//clear the interrupt flag
	PORTC.INTFLAGS |= (1 << SW);
  88:	e0 e4       	ldi	r30, 0x40	; 64
  8a:	f4 e0       	ldi	r31, 0x04	; 4
  8c:	81 85       	ldd	r24, Z+9	; 0x09
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	81 87       	std	Z+9, r24	; 0x09
	sei();
  92:	78 94       	sei
}
  94:	ff 91       	pop	r31
  96:	ef 91       	pop	r30
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <__vector_3>:
 *
 * Function is called when the pg pin (Port A Pin 2) sees a rising or 
 * falling edge. This indicates that charging has started or stopped.
 */
ISR(PORTA_PORT_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	cli();
  b4:	f8 94       	cli
	pg_state_change = 1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 1c 3e 	sts	0x3E1C, r24	; 0x803e1c <__data_end>
	//clear the interrupt flag
	PORTA.INTFLAGS |= (1 << PG);
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f4 e0       	ldi	r31, 0x04	; 4
  c0:	81 85       	ldd	r24, Z+9	; 0x09
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	81 87       	std	Z+9, r24	; 0x09
	sei();
  c6:	78 94       	sei
}
  c8:	ff 91       	pop	r31
  ca:	ef 91       	pop	r30
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <validate_uart_checksum>:
 * \param[in] buffer a buffer to store fixed length UART messages 
 *
 * \return A boolean value. 1 indicates a valid checksum. Otherwise 0.
 */
uint8_t validate_uart_checksum(char *buffer)
{
  d8:	fc 01       	movw	r30, r24
  da:	9c 01       	movw	r18, r24
  dc:	2b 5f       	subi	r18, 0xFB	; 251
  de:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t sum = 0, i = 0;
  e0:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0; i<UART_MSG_SIZE; i++)
	{
		sum += buffer[i];
  e2:	81 91       	ld	r24, Z+
  e4:	98 0f       	add	r25, r24
 * \return A boolean value. 1 indicates a valid checksum. Otherwise 0.
 */
uint8_t validate_uart_checksum(char *buffer)
{
	uint8_t sum = 0, i = 0;
	for(i=0; i<UART_MSG_SIZE; i++)
  e6:	e2 17       	cp	r30, r18
  e8:	f3 07       	cpc	r31, r19
  ea:	d9 f7       	brne	.-10     	; 0xe2 <validate_uart_checksum+0xa>
	{
		sum += buffer[i];
	}
	return (sum == 0xFF);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	9f 3f       	cpi	r25, 0xFF	; 255
  f0:	09 f0       	breq	.+2      	; 0xf4 <validate_uart_checksum+0x1c>
  f2:	80 e0       	ldi	r24, 0x00	; 0
}
  f4:	08 95       	ret

000000f6 <set_led_by_id>:
 *
 * \return Nothing
 */
void set_led_by_id(peripheral_id id, char val)
{
	if(val)
  f6:	66 23       	and	r22, r22
  f8:	c9 f0       	breq	.+50     	; 0x12c <set_led_by_id+0x36>
	{
		//turn on the led defined by id
		PORTA.OUT |= (1 << periphs[id].port_pin);
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b4 e0       	ldi	r27, 0x04	; 4
  fe:	14 96       	adiw	r26, 0x04	; 4
 100:	2c 91       	ld	r18, X
 102:	14 97       	sbiw	r26, 0x04	; 4
 104:	e8 2f       	mov	r30, r24
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	f2 4c       	sbci	r31, 0xC2	; 194
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 80       	ldd	r0, Z+2	; 0x02
 11a:	02 c0       	rjmp	.+4      	; 0x120 <set_led_by_id+0x2a>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <set_led_by_id+0x26>
 124:	82 2b       	or	r24, r18
 126:	14 96       	adiw	r26, 0x04	; 4
 128:	8c 93       	st	X, r24
 12a:	08 95       	ret
	}
	else
	{
		//turn off the led defined by id
		PORTA.OUT &= ~(1 << periphs[id].port_pin);
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b4 e0       	ldi	r27, 0x04	; 4
 130:	14 96       	adiw	r26, 0x04	; 4
 132:	2c 91       	ld	r18, X
 134:	14 97       	sbiw	r26, 0x04	; 4
 136:	e8 2f       	mov	r30, r24
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	e0 50       	subi	r30, 0x00	; 0
 144:	f2 4c       	sbci	r31, 0xC2	; 194
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 80       	ldd	r0, Z+2	; 0x02
 14c:	02 c0       	rjmp	.+4      	; 0x152 <set_led_by_id+0x5c>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <set_led_by_id+0x58>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	14 96       	adiw	r26, 0x04	; 4
 15c:	8c 93       	st	X, r24
 15e:	08 95       	ret

00000160 <is_vaild_start_byte>:
 * \return a boolean value to represent the start byte status. 1 indicates 
 * a valid byte.
 */
uint8_t is_vaild_start_byte(uint8_t new_val)
{
	return ((new_val == CMD_TYPE) | (new_val == REQ_TYPE) | (new_val == DAT_TYPE));
 160:	9d eb       	ldi	r25, 0xBD	; 189
 162:	98 0f       	add	r25, r24
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	92 30       	cpi	r25, 0x02	; 2
 168:	08 f0       	brcs	.+2      	; 0x16c <is_vaild_start_byte+0xc>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	82 35       	cpi	r24, 0x52	; 82
 170:	09 f0       	breq	.+2      	; 0x174 <is_vaild_start_byte+0x14>
 172:	90 e0       	ldi	r25, 0x00	; 0
}
 174:	82 2f       	mov	r24, r18
 176:	89 2b       	or	r24, r25
 178:	08 95       	ret

0000017a <calculate_uart_checksum>:
 * \param[in] buffer a buffer containing a staged UART message
 *
 * \return the calculated 8 bit checksum
 */
uint8_t calculate_uart_checksum(char *buffer)
{
 17a:	fc 01       	movw	r30, r24
 17c:	9c 01       	movw	r18, r24
 17e:	2c 5f       	subi	r18, 0xFC	; 252
 180:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i, sum = 0;
 182:	80 e0       	ldi	r24, 0x00	; 0
	//Stop before summing the checksum field
	for(i=0; i<UART_MSG_SIZE-1; i++)
	{
		sum += buffer[i];
 184:	91 91       	ld	r25, Z+
 186:	89 0f       	add	r24, r25
 */
uint8_t calculate_uart_checksum(char *buffer)
{
	uint8_t i, sum = 0;
	//Stop before summing the checksum field
	for(i=0; i<UART_MSG_SIZE-1; i++)
 188:	e2 17       	cp	r30, r18
 18a:	f3 07       	cpc	r31, r19
 18c:	d9 f7       	brne	.-10     	; 0x184 <calculate_uart_checksum+0xa>
	{
		sum += buffer[i];
	}
	//return the compliment of the sum
	return ~sum;
}
 18e:	80 95       	com	r24
 190:	08 95       	ret

00000192 <send_data_uart_msg>:
 * \param[in] id the peripheral id to be used in the data message
 *
 * \return Nothing
 */
void send_data_uart_msg(char *buffer, peripheral_id id, uint16_t data)
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
	buffer[msg_type] = DAT_TYPE;
 198:	84 e4       	ldi	r24, 0x44	; 68
 19a:	88 83       	st	Y, r24
	buffer[periph_id] = id;
 19c:	69 83       	std	Y+1, r22	; 0x01
	buffer[data_ms_byte] = (data >> 8);
 19e:	5a 83       	std	Y+2, r21	; 0x02
	buffer[data_ls_byte] = (data & 0x00FF);
 1a0:	4b 83       	std	Y+3, r20	; 0x03
	buffer[checksum] = calculate_uart_checksum(buffer);
 1a2:	ce 01       	movw	r24, r28
 1a4:	ea df       	rcall	.-44     	; 0x17a <calculate_uart_checksum>
 1a6:	8c 83       	std	Y+4, r24	; 0x04
	
	USART_0_write_data(buffer, UART_MSG_SIZE);
 1a8:	65 e0       	ldi	r22, 0x05	; 5
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	ce 01       	movw	r24, r28
 1ae:	4b d1       	rcall	.+662    	; 0x446 <USART_0_write_data>
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <process_uart_command>:
 * \param[in] buffer a buffer to store fixed length UART messages 
 *
 * \return Nothing
 */
void process_uart_command(char *buffer)
{
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
	//perform the command
	peripheral_id id;
	id = buffer[periph_id];
 1be:	19 81       	ldd	r17, Y+1	; 0x01
	set_led_by_id(id, buffer[data_ls_byte]);
 1c0:	6b 81       	ldd	r22, Y+3	; 0x03
 1c2:	81 2f       	mov	r24, r17
 1c4:	98 df       	rcall	.-208    	; 0xf6 <set_led_by_id>
	//send a data packet as an ACK
	send_data_uart_msg(buffer, id, (uint16_t)buffer[data_ls_byte]);
 1c6:	4b 81       	ldd	r20, Y+3	; 0x03
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	61 2f       	mov	r22, r17
 1cc:	ce 01       	movw	r24, r28
 1ce:	e1 df       	rcall	.-62     	; 0x192 <send_data_uart_msg>
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	08 95       	ret

000001d8 <get_data_from_periph>:
 * \return the 16 bit (only 8 bits used currently) value of the peripheral
 */
uint16_t get_data_from_periph(peripheral_id id)
{
	peripheral_t new_periph;
	new_periph = periphs[id];
 1d8:	24 e0       	ldi	r18, 0x04	; 4
 1da:	82 9f       	mul	r24, r18
 1dc:	c0 01       	movw	r24, r0
 1de:	11 24       	eor	r1, r1
 1e0:	fc 01       	movw	r30, r24
 1e2:	e0 50       	subi	r30, 0x00	; 0
 1e4:	f2 4c       	sbci	r31, 0xC2	; 194
 1e6:	92 81       	ldd	r25, Z+2	; 0x02
 1e8:	83 81       	ldd	r24, Z+3	; 0x03
	if(new_periph.pin_type == INPUT)
 1ea:	81 11       	cpse	r24, r1
 1ec:	23 c0       	rjmp	.+70     	; 0x234 <get_data_from_periph+0x5c>
 * \return the 16 bit (only 8 bits used currently) value of the peripheral
 */
uint16_t get_data_from_periph(peripheral_id id)
{
	peripheral_t new_periph;
	new_periph = periphs[id];
 1ee:	81 81       	ldd	r24, Z+1	; 0x01
	if(new_periph.pin_type == INPUT)
	{
		if(new_periph.port == PORT_A)
 1f0:	81 11       	cpse	r24, r1
 1f2:	0f c0       	rjmp	.+30     	; 0x212 <get_data_from_periph+0x3a>
		{
			return (PORTA.IN & (1 << new_periph.port_pin));
 1f4:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	ba 01       	movw	r22, r20
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <get_data_from_periph+0x2c>
 200:	66 0f       	add	r22, r22
 202:	77 1f       	adc	r23, r23
 204:	9a 95       	dec	r25
 206:	e2 f7       	brpl	.-8      	; 0x200 <get_data_from_periph+0x28>
 208:	cb 01       	movw	r24, r22
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	82 23       	and	r24, r18
 20e:	93 23       	and	r25, r19
 210:	08 95       	ret
		}
		else if(new_periph.port == PORT_C)
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	01 f5       	brne	.+64     	; 0x256 <get_data_from_periph+0x7e>
		{
			return (PORTC.IN & (1 << new_periph.port_pin));
 216:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x700448>
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	ba 01       	movw	r22, r20
 220:	02 c0       	rjmp	.+4      	; 0x226 <get_data_from_periph+0x4e>
 222:	66 0f       	add	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	9a 95       	dec	r25
 228:	e2 f7       	brpl	.-8      	; 0x222 <get_data_from_periph+0x4a>
 22a:	cb 01       	movw	r24, r22
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	82 23       	and	r24, r18
 230:	93 23       	and	r25, r19
 232:	08 95       	ret
		}
		return 255;
	}
	else if(new_periph.pin_type == OUTPUT)
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	91 f4       	brne	.+36     	; 0x25c <get_data_from_periph+0x84>
	{
		//read from the output port- all outputs are on PORTA, return the data
		return (PORTA.OUT & (1 << new_periph.port_pin));
 238:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x700404>
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	ba 01       	movw	r22, r20
 242:	02 c0       	rjmp	.+4      	; 0x248 <get_data_from_periph+0x70>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	9a 95       	dec	r25
 24a:	e2 f7       	brpl	.-8      	; 0x244 <get_data_from_periph+0x6c>
 24c:	cb 01       	movw	r24, r22
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	82 23       	and	r24, r18
 252:	93 23       	and	r25, r19
 254:	08 95       	ret
		}
		else if(new_periph.port == PORT_C)
		{
			return (PORTC.IN & (1 << new_periph.port_pin));
		}
		return 255;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	08 95       	ret
	else if(new_periph.pin_type == OUTPUT)
	{
		//read from the output port- all outputs are on PORTA, return the data
		return (PORTA.OUT & (1 << new_periph.port_pin));
	}
	return 0;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	08 95       	ret

00000262 <process_uart_request>:
 * \param[in] buffer a buffer to store fixed length UART messages 
 *
 * \return Nothing
 */
void process_uart_request(char *buffer)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
	uint16_t new_data;
	//get the data from the peripheral
	new_data = get_data_from_periph(buffer[periph_id]);
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	b6 df       	rcall	.-148    	; 0x1d8 <get_data_from_periph>
	//send the data
	send_data_uart_msg(buffer, buffer[periph_id], new_data);
 26c:	ac 01       	movw	r20, r24
 26e:	69 81       	ldd	r22, Y+1	; 0x01
 270:	ce 01       	movw	r24, r28
 272:	8f df       	rcall	.-226    	; 0x192 <send_data_uart_msg>
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <process_uart_message>:
 * \param[in] buffer a buffer to store fixed length UART messages 
 *
 * \return Nothing
 */
void process_uart_message(char *buffer)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
	//Only process if the checksum is valid
	if(validate_uart_checksum(buffer))
 280:	2b df       	rcall	.-426    	; 0xd8 <validate_uart_checksum>
 282:	88 23       	and	r24, r24
 284:	51 f0       	breq	.+20     	; 0x29a <process_uart_message+0x20>
	{
		uint8_t msg_type = buffer[0];
 286:	88 81       	ld	r24, Y
		if(msg_type == CMD_TYPE)
 288:	83 34       	cpi	r24, 0x43	; 67
 28a:	19 f4       	brne	.+6      	; 0x292 <process_uart_message+0x18>
		{
			process_uart_command(buffer);
 28c:	ce 01       	movw	r24, r28
 28e:	93 df       	rcall	.-218    	; 0x1b6 <process_uart_command>
 290:	04 c0       	rjmp	.+8      	; 0x29a <process_uart_message+0x20>
		}
		else if(msg_type == REQ_TYPE)
 292:	82 35       	cpi	r24, 0x52	; 82
 294:	11 f4       	brne	.+4      	; 0x29a <process_uart_message+0x20>
		{
			process_uart_request(buffer);
 296:	ce 01       	movw	r24, r28
 298:	e4 df       	rcall	.-56     	; 0x262 <process_uart_request>
	else
	{
		//flash the red led for debugging purposes
		//PORTA.OUT |= (1 << RED_LED);
	}
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <check_for_UART_msg>:
 * \param[in] buffer a buffer to store fixed length USART messages 
 *
 * \return Nothing
 */
void check_for_UART_msg(uint8_t *cur_msg_size, char *buffer)
{
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	ec 01       	movw	r28, r24
 2ac:	7b 01       	movw	r14, r22
	uint8_t new_val = 0;
	if(USART_0_is_rx_ready())
 2ae:	b5 d0       	rcall	.+362    	; 0x41a <USART_0_is_rx_ready>
 2b0:	81 11       	cpse	r24, r1
 2b2:	17 c0       	rjmp	.+46     	; 0x2e2 <check_for_UART_msg+0x42>
 2b4:	1f c0       	rjmp	.+62     	; 0x2f4 <check_for_UART_msg+0x54>
	{	
		while(USART_0_is_rx_ready())
		{
			//read the new character to verify 
			new_val = USART_0_read();
 2b6:	b7 d0       	rcall	.+366    	; 0x426 <USART_0_read>
 2b8:	18 2f       	mov	r17, r24
			if(*cur_msg_size == 0)
 2ba:	88 81       	ld	r24, Y
 2bc:	81 11       	cpse	r24, r1
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <check_for_UART_msg+0x34>
			{
				//verify the first character of a message is a valid start bit
				if(is_vaild_start_byte(new_val))
 2c0:	81 2f       	mov	r24, r17
 2c2:	4e df       	rcall	.-356    	; 0x160 <is_vaild_start_byte>
 2c4:	88 23       	and	r24, r24
 2c6:	69 f0       	breq	.+26     	; 0x2e2 <check_for_UART_msg+0x42>
				{
					buffer[*cur_msg_size] = new_val;
 2c8:	f7 01       	movw	r30, r14
 2ca:	10 83       	st	Z, r17
					*cur_msg_size += 1;
 2cc:	88 81       	ld	r24, Y
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	88 83       	st	Y, r24
 2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <check_for_UART_msg+0x42>
				}
			}
			else
			{
				buffer[*cur_msg_size] = new_val;
 2d4:	f7 01       	movw	r30, r14
 2d6:	e8 0f       	add	r30, r24
 2d8:	f1 1d       	adc	r31, r1
 2da:	10 83       	st	Z, r17
				*cur_msg_size += 1;
 2dc:	88 81       	ld	r24, Y
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	88 83       	st	Y, r24
void check_for_UART_msg(uint8_t *cur_msg_size, char *buffer)
{
	uint8_t new_val = 0;
	if(USART_0_is_rx_ready())
	{	
		while(USART_0_is_rx_ready())
 2e2:	9b d0       	rcall	.+310    	; 0x41a <USART_0_is_rx_ready>
 2e4:	81 11       	cpse	r24, r1
 2e6:	e7 cf       	rjmp	.-50     	; 0x2b6 <check_for_UART_msg+0x16>
			{
				buffer[*cur_msg_size] = new_val;
				*cur_msg_size += 1;
			}
		}
		if(*cur_msg_size >= UART_MSG_SIZE)
 2e8:	88 81       	ld	r24, Y
 2ea:	85 30       	cpi	r24, 0x05	; 5
 2ec:	18 f0       	brcs	.+6      	; 0x2f4 <check_for_UART_msg+0x54>
		{
			//A complete message has been read
			process_uart_message(buffer);
 2ee:	c7 01       	movw	r24, r14
 2f0:	c4 df       	rcall	.-120    	; 0x27a <process_uart_message>
			*cur_msg_size = 0;
 2f2:	18 82       	st	Y, r1
		}
	}
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	08 95       	ret

00000300 <main>:
 *
 * Function is called when the pull switch (Port C Pin 0) sees a rising or 
 * falling edge.
 */
int main(void)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	26 97       	sbiw	r28, 0x06	; 6
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	de bf       	out	0x3e, r29	; 62
	/* Initializes MCU */
	atmel_start_init();
 30e:	ae de       	rcall	.-676    	; 0x6c <atmel_start_init>
	USART_0_enable();
 310:	78 d0       	rcall	.+240    	; 0x402 <USART_0_enable>
	char buffer[UART_MSG_SIZE];
	uint8_t cur_msg_size = 0;
 312:	1e 82       	std	Y+6, r1	; 0x06
	
	//set PortA Outputs
	PORTA.DIR |= (  1 << RED_LED
 314:	e0 e0       	ldi	r30, 0x00	; 0
 316:	f4 e0       	ldi	r31, 0x04	; 4
 318:	80 81       	ld	r24, Z
 31a:	80 6e       	ori	r24, 0xE0	; 224
 31c:	80 83       	st	Z, r24
	              | 1 << GREEN_LED
				  | 1 << BLUE_LED);
    //set PortA Inputs
	PORTA.DIR &= ~(1 << PG);
 31e:	80 81       	ld	r24, Z
 320:	8b 7f       	andi	r24, 0xFB	; 251
 322:	80 83       	st	Z, r24
				  
	//set PortC Inputs
	PORTC.DIR &= ~( 1 << SW
 324:	a0 e4       	ldi	r26, 0x40	; 64
 326:	b4 e0       	ldi	r27, 0x04	; 4
 328:	8c 91       	ld	r24, X
 32a:	84 7f       	andi	r24, 0xF4	; 244
 32c:	8c 93       	st	X, r24
	              | 1 << STAT1
				  | 1 << STAT2);
	
	//set up interrupts for the switch and pg
	PORTC.PIN0CTRL |= (1); //enable rising and falling edge detection PortCPin0
 32e:	50 96       	adiw	r26, 0x10	; 16
 330:	8c 91       	ld	r24, X
 332:	50 97       	sbiw	r26, 0x10	; 16
 334:	81 60       	ori	r24, 0x01	; 1
 336:	50 96       	adiw	r26, 0x10	; 16
 338:	8c 93       	st	X, r24
	PORTA.PIN2CTRL |= (1); //enable rising and falling edge detection PortAPin2
 33a:	82 89       	ldd	r24, Z+18	; 0x12
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	82 8b       	std	Z+18, r24	; 0x12
	sei();
 340:	78 94       	sei
	while (1) {
		check_for_UART_msg(&cur_msg_size, buffer);
		if(pg_state_change)
		{
			//send updated pg message
			buffer[periph_id] = pg;
 342:	13 e0       	ldi	r17, 0x03	; 3
			pg_state_change = 0;
		}
		if(sw_state_change)
		{
			//send updated sw message, 
			buffer[periph_id] = sw;
 344:	06 e0       	ldi	r16, 0x06	; 6
	PORTC.PIN0CTRL |= (1); //enable rising and falling edge detection PortCPin0
	PORTA.PIN2CTRL |= (1); //enable rising and falling edge detection PortAPin2
	sei();

	while (1) {
		check_for_UART_msg(&cur_msg_size, buffer);
 346:	be 01       	movw	r22, r28
 348:	6f 5f       	subi	r22, 0xFF	; 255
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	ce 01       	movw	r24, r28
 34e:	06 96       	adiw	r24, 0x06	; 6
 350:	a7 df       	rcall	.-178    	; 0x2a0 <check_for_UART_msg>
		if(pg_state_change)
 352:	80 91 1c 3e 	lds	r24, 0x3E1C	; 0x803e1c <__data_end>
 356:	88 23       	and	r24, r24
 358:	31 f0       	breq	.+12     	; 0x366 <main+0x66>
		{
			//send updated pg message
			buffer[periph_id] = pg;
 35a:	1a 83       	std	Y+2, r17	; 0x02
			process_uart_request(buffer);
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	80 df       	rcall	.-256    	; 0x262 <process_uart_request>
			pg_state_change = 0;
 362:	10 92 1c 3e 	sts	0x3E1C, r1	; 0x803e1c <__data_end>
		}
		if(sw_state_change)
 366:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <sw_state_change>
 36a:	88 23       	and	r24, r24
 36c:	61 f3       	breq	.-40     	; 0x346 <main+0x46>
		{
			//send updated sw message, 
			buffer[periph_id] = sw;
 36e:	0a 83       	std	Y+2, r16	; 0x02
			process_uart_request(buffer);
 370:	ce 01       	movw	r24, r28
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	76 df       	rcall	.-276    	; 0x262 <process_uart_request>
			sw_state_change = 0;
 376:	10 92 1d 3e 	sts	0x3E1D, r1	; 0x803e1d <sw_state_change>
 37a:	e5 cf       	rjmp	.-54     	; 0x346 <main+0x46>

0000037c <BOD_init>:
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret

00000380 <CLKCTRL_init>:
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	08 95       	ret

00000384 <CPUINT_init>:
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret

00000388 <mcu_init>:
 388:	e0 e1       	ldi	r30, 0x10	; 16
 38a:	f4 e0       	ldi	r31, 0x04	; 4
 38c:	80 81       	ld	r24, Z
 38e:	88 60       	ori	r24, 0x08	; 8
 390:	81 93       	st	Z+, r24
 392:	e8 31       	cpi	r30, 0x18	; 24
 394:	84 e0       	ldi	r24, 0x04	; 4
 396:	f8 07       	cpc	r31, r24
 398:	c9 f7       	brne	.-14     	; 0x38c <mcu_init+0x4>
 39a:	e0 e3       	ldi	r30, 0x30	; 48
 39c:	f4 e0       	ldi	r31, 0x04	; 4
 39e:	80 81       	ld	r24, Z
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	81 93       	st	Z+, r24
 3a4:	e8 33       	cpi	r30, 0x38	; 56
 3a6:	84 e0       	ldi	r24, 0x04	; 4
 3a8:	f8 07       	cpc	r31, r24
 3aa:	c9 f7       	brne	.-14     	; 0x39e <mcu_init+0x16>
 3ac:	e0 e5       	ldi	r30, 0x50	; 80
 3ae:	f4 e0       	ldi	r31, 0x04	; 4
 3b0:	80 81       	ld	r24, Z
 3b2:	88 60       	ori	r24, 0x08	; 8
 3b4:	81 93       	st	Z+, r24
 3b6:	e8 35       	cpi	r30, 0x58	; 88
 3b8:	84 e0       	ldi	r24, 0x04	; 4
 3ba:	f8 07       	cpc	r31, r24
 3bc:	c9 f7       	brne	.-14     	; 0x3b0 <mcu_init+0x28>
 3be:	08 95       	ret

000003c0 <USART_0_initialization>:
 3c0:	23 98       	cbi	0x04, 3	; 4
 3c2:	e3 e3       	ldi	r30, 0x33	; 51
 3c4:	f4 e0       	ldi	r31, 0x04	; 4
 3c6:	80 81       	ld	r24, Z
 3c8:	87 7f       	andi	r24, 0xF7	; 247
 3ca:	80 83       	st	Z, r24
 3cc:	22 9a       	sbi	0x04, 2	; 4
 3ce:	2a 98       	cbi	0x05, 2	; 5
 3d0:	0a d0       	rcall	.+20     	; 0x3e6 <USART_0_init>
 3d2:	08 95       	ret

000003d4 <system_init>:
 3d4:	d9 df       	rcall	.-78     	; 0x388 <mcu_init>
 3d6:	d4 df       	rcall	.-88     	; 0x380 <CLKCTRL_init>
 3d8:	f3 df       	rcall	.-26     	; 0x3c0 <USART_0_initialization>
 3da:	d4 df       	rcall	.-88     	; 0x384 <CPUINT_init>
 3dc:	02 d0       	rcall	.+4      	; 0x3e2 <SLPCTRL_init>
 3de:	ce df       	rcall	.-100    	; 0x37c <BOD_init>
 3e0:	08 95       	ret

000003e2 <SLPCTRL_init>:
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	08 95       	ret

000003e6 <USART_0_init>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
	return (!(USART0.STATUS & USART_TXCIF_bm));
}
 3e6:	e0 e0       	ldi	r30, 0x00	; 0
 3e8:	f8 e0       	ldi	r31, 0x08	; 8
 3ea:	8d e6       	ldi	r24, 0x6D	; 109
 3ec:	95 e0       	ldi	r25, 0x05	; 5
 3ee:	80 87       	std	Z+8, r24	; 0x08
 3f0:	91 87       	std	Z+9, r25	; 0x09
 3f2:	15 82       	std	Z+5, r1	; 0x05
 3f4:	80 ec       	ldi	r24, 0xC0	; 192
 3f6:	86 83       	std	Z+6, r24	; 0x06
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	87 83       	std	Z+7, r24	; 0x07
 3fc:	13 86       	std	Z+11, r1	; 0x0b
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	08 95       	ret

00000402 <USART_0_enable>:
 402:	e0 e0       	ldi	r30, 0x00	; 0
 404:	f8 e0       	ldi	r31, 0x08	; 8
 406:	86 81       	ldd	r24, Z+6	; 0x06
 408:	80 6c       	ori	r24, 0xC0	; 192
 40a:	86 83       	std	Z+6, r24	; 0x06
 40c:	08 95       	ret

0000040e <USART_0_is_tx_ready>:
 40e:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
 412:	85 fb       	bst	r24, 5
 414:	88 27       	eor	r24, r24
 416:	80 f9       	bld	r24, 0
 418:	08 95       	ret

0000041a <USART_0_is_rx_ready>:
 41a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
 41e:	88 1f       	adc	r24, r24
 420:	88 27       	eor	r24, r24
 422:	88 1f       	adc	r24, r24
 424:	08 95       	ret

00000426 <USART_0_read>:
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
 426:	e0 e0       	ldi	r30, 0x00	; 0
 428:	f8 e0       	ldi	r31, 0x08	; 8
 42a:	84 81       	ldd	r24, Z+4	; 0x04
 42c:	88 23       	and	r24, r24
 42e:	ec f7       	brge	.-6      	; 0x42a <USART_0_read+0x4>
		;
	return USART0.RXDATAL;
 430:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
}
 434:	08 95       	ret

00000436 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
 436:	e0 e0       	ldi	r30, 0x00	; 0
 438:	f8 e0       	ldi	r31, 0x08	; 8
 43a:	94 81       	ldd	r25, Z+4	; 0x04
 43c:	95 ff       	sbrs	r25, 5
 43e:	fd cf       	rjmp	.-6      	; 0x43a <USART_0_write+0x4>
		;
	USART0.TXDATAL = data;
 440:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
 444:	08 95       	ret

00000446 <USART_0_write_data>:
 * \param[in] length The number of characters to write to the USART
 *
 * \return Nothing
 */
void USART_0_write_data(char *buffer, uint16_t length)
{
 446:	ef 92       	push	r14
 448:	ff 92       	push	r15
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	7c 01       	movw	r14, r24
 452:	8b 01       	movw	r16, r22
	uint8_t i;
	i = 0;
 454:	c0 e0       	ldi	r28, 0x00	; 0
	while(1)
	{
		if(USART_0_is_tx_ready())
 456:	db df       	rcall	.-74     	; 0x40e <USART_0_is_tx_ready>
 458:	88 23       	and	r24, r24
 45a:	e9 f3       	breq	.-6      	; 0x456 <USART_0_write_data+0x10>
		{
			USART_0_write(buffer[i]);
 45c:	f7 01       	movw	r30, r14
 45e:	ec 0f       	add	r30, r28
 460:	f1 1d       	adc	r31, r1
 462:	80 81       	ld	r24, Z
 464:	e8 df       	rcall	.-48     	; 0x436 <USART_0_write>
			i++;
 466:	cf 5f       	subi	r28, 0xFF	; 255
			if(i == length)
 468:	8c 2f       	mov	r24, r28
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	80 17       	cp	r24, r16
 46e:	91 07       	cpc	r25, r17
 470:	91 f7       	brne	.-28     	; 0x456 <USART_0_write_data+0x10>
				break;
		}
	}
}
 472:	cf 91       	pop	r28
 474:	1f 91       	pop	r17
 476:	0f 91       	pop	r16
 478:	ff 90       	pop	r15
 47a:	ef 90       	pop	r14
 47c:	08 95       	ret

0000047e <_exit>:
 47e:	f8 94       	cli

00000480 <__stop_program>:
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stop_program>
